This patch fixes an issue where snmpdf was not returning the
correct total disk size and available disk size when the size
of the filesystem is larger than 1TB.This bug is already fixed
in the community and the fix is available from the net-snmp
version 5.6 onwards.The fix here slightly differs from the community
since the patch in the community is applied on net-snmp version 5.6.
This patch is taken from the below link.

https://bugs.launchpad.net/ubuntu/+source/net-snmp/+bug/865268

diff -wpruN '--exclude=*.orig' a~/agent/mibgroup/host/hr_storage.c a/agent/mibgroup/host/hr_storage.c
--- a~/agent/mibgroup/host/hr_storage.c	1970-01-01 00:00:00
+++ a/agent/mibgroup/host/hr_storage.c	1970-01-01 00:00:00
@@ -527,6 +527,7 @@ var_hrstore(struct variable *vp,
             int exact, size_t * var_len, WriteMethod ** write_method)
 {
     int             store_idx = 0;
+    int             factor = 0;
     static char     string[1024];
     struct HRFS_statfs stat_buf;
     void                *ptr;
@@ -554,6 +555,12 @@ really_try_next:
 	    mem = (netsnmp_memory_info*)ptr;
         }
 
+/* Scaling factor for large filesystems */
+    if (store_idx > NETSNMP_MEM_TYPE_MAX) {
+        unsigned long long tmp = stat_buf.f_blocks;
+        while (tmp > 0x7fffffff)
+            tmp >>= 1, factor++;
+    }
 
 
     switch (vp->magic) {
@@ -604,9 +611,9 @@ really_try_next:
     case HRSTORE_UNITS:
         if (store_idx > NETSNMP_MEM_TYPE_MAX)
 #if HRFS_HAS_FRSIZE
-            long_return = stat_buf.f_frsize;
+            long_return = stat_buf.f_frsize << factor;
 #else
-            long_return = stat_buf.f_bsize;
+            long_return = stat_buf.f_bsize << factor;
 #endif
         else {
             if ( !mem || mem->units == -1 )
@@ -616,7 +623,7 @@ really_try_next:
         return (u_char *) & long_return;
     case HRSTORE_SIZE:
         if (store_idx > NETSNMP_MEM_TYPE_MAX)
-            long_return = stat_buf.f_blocks;
+            long_return = stat_buf.f_blocks >> factor;
         else {
             if ( !mem || mem->size == -1 )
                 goto try_next;
@@ -625,7 +632,7 @@ really_try_next:
         return (u_char *) & long_return;
     case HRSTORE_USED:
         if (store_idx > NETSNMP_MEM_TYPE_MAX)
-            long_return = (stat_buf.f_blocks - stat_buf.f_bfree);
+            long_return = (stat_buf.f_blocks - stat_buf.f_bfree) >> factor;
         else {
             if ( !mem || mem->size == -1 || mem->free == -1 )
                 goto try_next;
