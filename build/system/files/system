* CDDL HEADER START
*
* This file and its contents are supplied under the terms of the
* Common Development and Distribution License ("CDDL"), version 1.0.
* You may only use this file in accordance with the terms of version
* 1.0 of the CDDL.
*
* A full copy of the text of the CDDL should have accompanied this
* source. A copy of the CDDL is also available via the Internet at
* http://www.illumos.org/license/CDDL.
*
* CDDL HEADER END

*************************************************************************
*
* This file contains the default system settings for OmniOS.
*
* Changes made here will be preserved on upgrade, but it is preferable
* to place local changes in a separate file within "/etc/system.d/" or
* to modify "/etc/system" which always takes precedence over anything in
* this directory.
*
*************************************************************************

*
* Make the stack non-executable for 32-bit binaries.
* (64-bit binaries always have a non-executable stack.)
*
set noexec_user_stack=1
set noexec_user_stack_log=1

*
* Increase the default "soft" limit on file descriptors that a single process
* can have open
*
set rlim_fd_cur=65536

*
* Distribute TCP/IP connections across CPUs. This accommodates NICs that are
* faster than a single CPU.
*
set ip:ip_squeue_fanout=1

*
* Machines should take a crash dump and reboot when receiving an NMI.
*
set pcplusmp:apic_panic_on_nmi=1
set apix:apic_panic_on_nmi=1

*
* Include dump statistics in crash dumps
*
set dump_metrics_on=1

*
* Don't use multi-threaded fast crash dump or a high compression level
*
set dump_plat_mincpu=0
set dump_bzip2_level=1

*
* The traditional (and essentially entirely brain dead) cfgadm(1M)-centric
* model of hotpluggin' appears to be basically unnecessary.  This tunable
* enables the system to create device nodes for newly inserted devices
* automatically.  See: usr/src/uts/common/io/sata/impl/sata.c:97
*
set sata:sata_auto_online=1

*
* We want to limit the time spent in any one I/O to 10 seconds for targets
* that are not optical.  This is still a very long time; our queue depth is
* typically 10 or less, and disks will usually fail a command after 2-3s.
* So we'd have to have multiple reads of bad sectors queued up to have any
* chance of timing out.  In practice, timeouts occur because of problems with
* disk controllers or firmware, not media errors, and in those cases it will
* not help at all to wait longer.
*
set sd:sd_io_time=10

