BINARY      : test_agentx.py
RETURN VALUE: 0

*** stdout ***

*** stderr ***
.............................
----------------------------------------------------------------------
Ran 29 tests

OK



BINARY      : test_agentx_packet.py
RETURN VALUE: 0

*** stdout ***

*** stderr ***
........................................
----------------------------------------------------------------------
Ran 40 tests

OK



BINARY      : test_libntp
RETURN VALUE: 0

*** stdout ***
Unity test run 1 of 1
TEST(authkeys, AddTrustedKeys) PASS
TEST(authkeys, AddUntrustedKey) PASS
TEST(authkeys, HaveKeyCorrect) PASS
TEST(authkeys, HaveKeyIncorrect) PASS
TEST(calendar, is_leapyear) PASS
TEST(calendar, julian0) PASS
TEST(calendar, days_per_year) PASS
TEST(calendar, parse_to_unixtime) PASS
TEST(calendar, PeriodicExtend1) PASS
TEST(calendar, NtpToTime1) PASS
TEST(calendar, NtpToNtp1) PASS
TEST(calendar, DaySplitMerge) PASS
TEST(calendar, DaysecToDate1) PASS
TEST(calendar, SplitEraDays1) PASS
TEST(calendar, SplitYearDays1) PASS
TEST(calendar, SplitYearDays2) PASS
TEST(calendar, RataDie1) PASS
TEST(calendar, TimeToDate1) PASS
TEST(calendar, DayJoin1) PASS
TEST(calendar, DaysInYears1) PASS
TEST(calendar, EdateToEradays1) PASS
TEST(calendar, EtimeToSeconds1) PASS
TEST(calendar, TmToRd1) PASS
TEST(calendar, LeapYears1) PASS
TEST(calendar, LeapYears2) PASS
TEST(calendar, RoundTripDate) PASS
TEST(calendar, DateToDaysec1) PASS
TEST(calendar, TmToDaysec1) PASS
TEST(calendar, DateToTime1) PASS
TEST(calendar, Ntp64ToDate1) PASS
TEST(calendar, NtpToDate1) PASS
TEST(clocktime, CurrentYear) PASS
TEST(clocktime, CurrentYearExplicit) PASS
TEST(clocktime, CurrentYearFuzz) PASS
TEST(clocktime, WrongYearStart) PASS
TEST(clocktime, PreviousYear) PASS
TEST(clocktime, NextYear) PASS
TEST(clocktime, NoReasonableConversion) PASS
TEST(clocktime, AlwaysInLimit) PASS
TEST(endian, Bit16) PASS
TEST(endian, Bit32) PASS
TEST(endian, Bit64) PASS
TEST(decodenetnum, Services) PASS
TEST(decodenetnum, IPv4AddressOnly) PASS
TEST(decodenetnum, IPv4AddressWithPort) PASS
TEST(decodenetnum, IPv4AddressWithPort2) PASS
TEST(decodenetnum, IPv6AddressOnly) PASS
TEST(decodenetnum, IPv6AddressWithPort) PASS
TEST(decodenetnum, IllegalAddress) PASS
TEST(decodenetnum, IllegalCharInPort) PASS
TEST(dolfptoa, DoLfpToA) PASS
TEST(dolfptoa, MfpToA) PASS
TEST(dolfptoa, MfpToMs) PASS
TEST(hextolfp, PositiveInteger) PASS
TEST(hextolfp, NegativeInteger) PASS
TEST(hextolfp, PositiveFraction) PASS
TEST(hextolfp, NegativeFraction) PASS
TEST(hextolfp, IllegalNumberOfInteger) PASS
TEST(hextolfp, IllegalChar) PASS
TEST(lfpfunc, Extraction) PASS
TEST(lfpfunc, Negation) PASS
TEST(lfpfunc, Absolute) PASS
TEST(lfpfunc, FDF_RoundTrip) PASS
TEST(lfpfunc, SignedRelOps) PASS
TEST(lfpfunc, UnsignedRelOps) PASS
TEST(lfptostr, PositiveInteger) PASS
TEST(lfptostr, NegativeInteger) PASS
TEST(lfptostr, PositiveIntegerWithFraction) PASS
TEST(lfptostr, NegativeIntegerWithFraction) PASS
TEST(lfptostr, RoundingDownToInteger) PASS
TEST(lfptostr, RoundingMiddleToInteger) PASS
TEST(lfptostr, RoundingUpToInteger) PASS
TEST(lfptostr, SingleDecimal) PASS
TEST(lfptostr, MillisecondsRoundingUp) PASS
TEST(lfptostr, MillisecondsRoundingDown) PASS
TEST(lfptostr, UnsignedInteger) PASS
TEST(macencrypt, Encrypt) PASS
TEST(macencrypt, DecryptValid) PASS
TEST(macencrypt, DecryptInvalid) PASS
TEST(macencrypt, CMAC_Encrypt) PASS
TEST(macencrypt, DecryptValidCMAC) PASS
TEST(macencrypt, DecryptInvalidCMAC) PASS
TEST(macencrypt, IPv4AddressToRefId) PASS
TEST(macencrypt, IPv6AddressToRefId) PASS
TEST(numtoa, RefidStr) PASS
TEST(prettydate, ConstantDate) PASS
TEST(prettydate, Rfc3339Date1) PASS
TEST(prettydate, Rfc3339Time1) PASS
TEST(random, random32) PASS
TEST(random, random_bytes) PASS
TEST(refidsmear, Main) PASS
TEST(socktoa, IPv4AddressWithPort) PASS
TEST(socktoa, IPv6AddressWithPort) PASS
TEST(socktoa, ScopedIPv6AddressWithPort) PASS
TEST(socktoa, HashEqual) PASS
TEST(socktoa, HashNotEqual) PASS
TEST(socktoa, IgnoreIPv6Fields) PASS
TEST(statestr, ResMatchFlags) PASS
TEST(statestr, ResAccessFlags) PASS
TEST(statestr, KSTFlags) PASS
TEST(statestr, StatusToA) PASS
TEST(statestr, PeerRestart) PASS
TEST(statestr, SysUnspecified) PASS
TEST(statestr, ClockCodeExists) PASS
TEST(statestr, ClockCodeUnknown) PASS
TEST(strtolfp, PositiveInteger) PASS
TEST(strtolfp, NegativeInteger) PASS
TEST(strtolfp, PositiveFraction) PASS
TEST(strtolfp, NegativeFraction) PASS
TEST(strtolfp, PositiveMsFraction) PASS
TEST(strtolfp, NegativeMsFraction) PASS
TEST(strtolfp, InvalidChars) PASS
TEST(timespecops, Helpers1) PASS
TEST(timespecops, Normalise) PASS
TEST(timespecops, SignNoFrac) PASS
TEST(timespecops, SignWithFrac) PASS
TEST(timespecops, CmpFracEQ) PASS
TEST(timespecops, CmpFracGT) PASS
TEST(timespecops, CmpFracLT) PASS
TEST(timespecops, AddFullNorm) PASS
TEST(timespecops, AddFullOflow1) PASS
TEST(timespecops, AddNsecNorm) PASS
TEST(timespecops, AddNsecOflow1) PASS
TEST(timespecops, SubFullNorm) PASS
TEST(timespecops, SubFullOflow) PASS
TEST(timespecops, SubNsecNorm) PASS
TEST(timespecops, SubNsecOflow) PASS
TEST(timespecops, test_Neg) PASS
TEST(timespecops, test_AbsNoFrac) PASS
TEST(timespecops, test_AbsWithFrac) PASS
TEST(timespecops, test_ToLFPbittest) PASS
TEST(timespecops, test_ToLFPrelPos) PASS
TEST(timespecops, test_ToLFPrelNeg) PASS
TEST(timespecops, test_ToLFPabs) PASS
TEST(timespecops, test_FromLFPbittest) PASS
TEST(timespecops, test_FromLFPrelPos) PASS
TEST(timespecops, test_FromLFPrelNeg) PASS
TEST(timespecops, test_LFProundtrip) PASS
TEST(timespecops, test_FromLFPuBittest) PASS
TEST(timespecops, test_FromLFPuRelPos) PASS
TEST(timespecops, test_FromLFPuRelNeg) PASS
TEST(timespecops, test_LFPuRoundtrip) PASS
TEST(timespecops, DToTspec) PASS
TEST(timespecops, LfpStampToTspec) PASS
TEST(timespecops, TvalToTspec) PASS
TEST(vi64ops, SetVUI64s_pos) PASS
TEST(vi64ops, SetVUI64s_neg) PASS
TEST(vi64ops, SetVUI64u) PASS
TEST(vi64ops, NegVUI64) PASS
TEST(ymd2yd, NonLeapYearFebruary) PASS
TEST(ymd2yd, NonLeapYearJune) PASS
TEST(ymd2yd, LeapYearFebruary) PASS
TEST(ymd2yd, LeapYearDecember) PASS

-----------------------
153 Tests 0 Failures 0 Ignored 
OK

*** stderr ***



BINARY      : test_libparse
RETURN VALUE: 0

*** stdout ***
Unity test run 1 of 1
TEST(binio, get_lsb_int160) PASS
TEST(binio, get_lsb_int161) PASS
TEST(binio, get_lsb_int162) PASS
TEST(binio, get_lsb_int163) PASS
TEST(binio, get_lsb_int164) PASS
TEST(binio, get_lsb_int320) PASS
TEST(binio, get_lsb_int321) PASS
TEST(binio, get_lsb_int322) PASS
TEST(binio, get_lsb_int323) PASS
TEST(binio, get_lsb_int324) PASS
TEST(binio, put_lsb_uint160) PASS
TEST(binio, put_lsb_uint161) PASS
TEST(binio, put_lsb_uint162) PASS
TEST(binio, put_lsb_uint163) PASS
TEST(binio, put_lsb_uint164) PASS
TEST(binio, get_lsb_uint160) PASS
TEST(binio, get_lsb_uint161) PASS
TEST(binio, get_lsb_uint162) PASS
TEST(binio, get_lsb_uint163) PASS
TEST(binio, get_lsb_uint164) PASS
TEST(binio, get_lsb_uint320) PASS
TEST(binio, get_lsb_uint321) PASS
TEST(binio, get_lsb_uint322) PASS
TEST(binio, get_lsb_uint323) PASS
TEST(binio, get_lsb_uint324) PASS
TEST(binio, get_msb_short0) PASS
TEST(binio, get_msb_short1) PASS
TEST(binio, get_msb_short2) PASS
TEST(binio, get_msb_short3) PASS
TEST(binio, get_msb_short4) PASS
TEST(binio, getmsb_short0) PASS
TEST(binio, getmsb_short1) PASS
TEST(binio, getmsb_short2) PASS
TEST(binio, getmsb_short3) PASS
TEST(binio, getmsb_short4) PASS
TEST(binio, get_msb_ushort0) PASS
TEST(binio, get_msb_ushort1) PASS
TEST(binio, get_msb_ushort2) PASS
TEST(binio, get_msb_ushort3) PASS
TEST(binio, get_msb_ushort4) PASS
TEST(gpstolfp, check) PASS
TEST(ieee754io, test_zero32) PASS
TEST(ieee754io, test_one32) PASS
TEST(ieee754io, test_negone32) PASS
TEST(ieee754io, test_small32) PASS
TEST(ieee754io, test_nan32) PASS
TEST(ieee754io, test_max32) PASS
TEST(ieee754io, test_order32) PASS
TEST(ieee754io, test_zero64) PASS
TEST(ieee754io, test_one64) PASS
TEST(ieee754io, test_negone64) PASS
TEST(ieee754io, test_small64) PASS
TEST(ieee754io, test_nan64) PASS
TEST(ieee754io, test_max64) PASS
TEST(ieee754io, test_order64) PASS

-----------------------
55 Tests 0 Failures 0 Ignored 
OK

*** stderr ***



BINARY      : test_ntpc.py
RETURN VALUE: 0

*** stdout ***

*** stderr ***
..
----------------------------------------------------------------------
Ran 2 tests

OK



BINARY      : test_ntpd
RETURN VALUE: 0

*** stdout ***
Unity test run 1 of 1
TEST(leapsec, ValidateGood) PASS
TEST(leapsec, ValidateNoHash) PASS
TEST(leapsec, ValidateBad) PASS
TEST(leapsec, ValidateMalformed) PASS
TEST(leapsec, ValidateMalformedShort) PASS
TEST(leapsec, ValidateNoLeadZero) PASS
TEST(leapsec, tableSelect) PASS
TEST(leapsec, loadFileExpire) PASS
TEST(leapsec, loadFileTTL) PASS
TEST(leapsec, lsQueryPristineState)leap table (0 entries) expires at 1970-01-01:
 PASS
TEST(leapsec, ls2009faraway) PASS
TEST(leapsec, ls2009weekaway) PASS
TEST(leapsec, ls2009houraway) PASS
TEST(leapsec, ls2009secaway) PASS
TEST(leapsec, ls2009onspot) PASS
TEST(leapsec, ls2009nodata) PASS
TEST(leapsec, ls2009limdata)leap table (10 entries) expires at 2014-06-01:
1991-01-01 [-] (1990-12-04) - 26
1992-07-01 [-] (1992-06-03) - 27
1993-07-01 [-] (1993-06-03) - 28
1994-07-01 [-] (1994-06-03) - 29
1996-01-01 [-] (1995-12-04) - 30
1997-07-01 [-] (1997-06-03) - 31
1999-01-01 [-] (1998-12-04) - 32
2006-01-01 [-] (2005-12-04) - 33
2009-01-01 [-] (2008-12-04) - 34
2012-07-01 [-] (2012-06-03) - 35
 PASS
TEST(leapsec, addDynamic)leap table (10 entries) expires at 1993-07-01:
1990-01-01 [-] (1989-12-04) - 25
1991-01-01 [-] (1990-12-04) - 26
1992-07-01 [-] (1992-06-03) - 27
1993-07-01 [-] (1993-06-03) - 28
1996-01-11 [*] (1995-12-11) - 29
1997-07-10 [*] (1997-06-10) - 30
1999-01-11 [*] (1998-12-11) - 31
2006-01-11 [*] (2005-12-11) - 32
2009-01-11 [*] (2008-12-11) - 33
2012-07-10 [*] (2012-06-10) - 34
 PASS
TEST(leapsec, addFixed) PASS
TEST(leapsec, ls2009seqInsElectric) PASS
TEST(leapsec, ls2009seqInsDumb) PASS
TEST(leapsec, ls2009seqDelElectric) PASS
TEST(leapsec, ls2009seqDelDumb) PASS
TEST(leapsec, ls2012seqInsElectric) PASS
TEST(leapsec, ls2012seqInsDumb) PASS
TEST(leapsec, lsEmptyTableDumb) PASS
TEST(leapsec, lsEmptyTableElectric) PASS
TEST(hackrestrict, RestrictionsAreEmptyAfterInit) PASS
TEST(hackrestrict, ReturnsCorrectDefaultRestrictions) PASS
TEST(hackrestrict, HackingDefaultRestriction) PASS
TEST(hackrestrict, CantRemoveDefaultEntry) PASS
TEST(hackrestrict, AddingNewRestriction) PASS
TEST(hackrestrict, TheMostFittingRestrictionIsMatched) PASS
TEST(hackrestrict, DeletedRestrictionIsNotMatched) PASS
TEST(hackrestrict, RestrictUnflagWorks) PASS
TEST(recvbuff, Initialization) PASS
TEST(recvbuff, GetAndFree) PASS
TEST(nts, nts_translate_version) PASS
TEST(nts, nts_string_to_aead) PASS
TEST(nts, nts_get_key_length) PASS
TEST(nts, ke_append_record_null) PASS
TEST(nts, ke_append_record_uint16) PASS
TEST(nts, ke_append_record_bytes) PASS
TEST(nts, ex_append_record_null) PASS
TEST(nts, ex_append_record_uint16) PASS
TEST(nts, ex_append_record_bytes) PASS
TEST(nts, ex_append_header) PASS
TEST(nts, append_header) PASS
TEST(nts, append_uint16) PASS
TEST(nts, append_bytes) PASS
TEST(nts, ke_next_record) PASS
TEST(nts, ex_next_record) PASS
TEST(nts, next_uint16) PASS
TEST(nts, next_bytes) PASS
TEST(nts_client, nts_client_send_request_core) PASS
TEST(nts_client, nts_client_process_response_core) PASS
TEST(nts_server, nts_ke_process_receive) PASS
TEST(nts_cookie, nts_make_unpack_cookie) PASS
TEST(nts_cookie, nts_make_cookie_key) PASS
TEST(nts_extens, extens_client_send) PASS
TEST(nts_extens, extens_server_recv) PASS

-----------------------
61 Tests 0 Failures 0 Ignored 
OK

*** stderr ***



BINARY      : test_packet.py
RETURN VALUE: 0

*** stdout ***

*** stderr ***
...............................................................
----------------------------------------------------------------------
Ran 63 tests

OK



BINARY      : test_statfiles.py
RETURN VALUE: 0

*** stdout ***

*** stderr ***
..............
----------------------------------------------------------------------
Ran 14 tests

OK



BINARY      : test_util.py
RETURN VALUE: 0

*** stdout ***

*** stderr ***
..........................................
----------------------------------------------------------------------
Ran 42 tests

OK



